# PokeCore .editorconfig
# Configuração otimizada para projeto de 4 camadas em C# WinForms

root = true

# ═══════════════════════════════════════════════════════════════
# CONFIGURAÇÕES GLOBAIS
# ═══════════════════════════════════════════════════════════════

[*]
charset = utf-8
insert_final_newline = true
trim_trailing_whitespace = true

# ═══════════════════════════════════════════════════════════════
# ARQUIVOS C# - CONFIGURAÇÕES PRINCIPAIS
# ═══════════════════════════════════════════════════════════════

[*.cs]

#### ORGANIZAÇÃO DE USINGS ####
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# Remove usings não utilizados
dotnet_diagnostic.IDE0005.severity = warning

#### PREFERÊNCIAS DE 'this.' ####
# Evita uso desnecessário de 'this.'
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

#### TIPOS PREDEFINIDOS vs FRAMEWORK ####
# Prefere: int ao invés de Int32, string ao invés de String
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

#### MODIFICADORES DE ACESSO ####
# Sempre exigir modificadores (public, private, etc)
dotnet_style_require_accessibility_modifiers = always:warning

# Ordem dos modificadores
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning

#### CAMPOS READONLY ####
# Tornar campos privados readonly quando possível
dotnet_style_readonly_field = true:warning

#### PARÂMETROS NÃO UTILIZADOS ####
# Avisar sobre parâmetros não usados
dotnet_code_quality_unused_parameters = all:warning

#### PREFERÊNCIAS NULL ####
# Usar ?? quando possível: var x = y ?? z;
dotnet_style_coalesce_expression = true:suggestion

# Usar null propagation: obj?.Method()
dotnet_style_null_propagation = true:suggestion

# ═══════════════════════════════════════════════════════════════
# CONVENÇÕES DE NOMENCLATURA
# ═══════════════════════════════════════════════════════════════

#### CAMPOS PRIVADOS COM _ ####
dotnet_naming_rule.private_fields_with_underscore.severity = suggestion
dotnet_naming_rule.private_fields_with_underscore.symbols = private_fields
dotnet_naming_rule.private_fields_with_underscore.style = underscore_prefix

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private

dotnet_naming_style.underscore_prefix.capitalization = camel_case
dotnet_naming_style.underscore_prefix.required_prefix = _

#### INTERFACES COM I ####
dotnet_naming_rule.interface_should_be_begins_with_i.severity = warning
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_symbols.interface.applicable_kinds = interface

dotnet_naming_style.begins_with_i.capitalization = pascal_case
dotnet_naming_style.begins_with_i.required_prefix = I

#### CLASSES, MÉTODOS, PROPRIEDADES - PASCALCASE ####
dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_symbols.types.applicable_kinds = class,struct,interface,enum,property,method,event

dotnet_naming_style.pascal_case.capitalization = pascal_case

#### CONSTANTES - PASCALCASE ####
dotnet_naming_rule.constants_should_be_pascal_case.severity = warning
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = pascal_case

dotnet_naming_symbols.constants.applicable_kinds = field
dotnet_naming_symbols.constants.required_modifiers = const

#### LOCAIS E PARÂMETROS - CAMELCASE ####
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter,local

dotnet_naming_style.camel_case.capitalization = camel_case

# ═══════════════════════════════════════════════════════════════
# FORMATAÇÃO C#
# ═══════════════════════════════════════════════════════════════

#### NOVAS LINHAS ####
# Chaves em nova linha (estilo Allman)
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

#### INDENTAÇÃO ####
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = no_change
csharp_indent_block_contents = true
csharp_indent_braces = false

#### ESPAÇAMENTO ####
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false

#### WRAPPING ####
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

#### PREFERÊNCIAS DE CHAVES ####
# Sempre usar chaves, mesmo em if de uma linha
csharp_prefer_braces = true:warning

#### VAR vs TIPO EXPLÍCITO ####
# Evita var para tipos primitivos: int x = 5; não var x = 5;
csharp_style_var_for_built_in_types = false:warning

# Usa var quando tipo é óbvio: var lista = new List<string>();
csharp_style_var_when_type_is_apparent = true:suggestion

# Evita var em outros casos
csharp_style_var_elsewhere = false:suggestion

#### PATTERN MATCHING ####
# Prefere: if (obj is string s) ao invés de if (obj is string) { var s = (string)obj; }
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

#### EXPRESSION-BODIED MEMBERS ####
# Para métodos e construtores, prefere bloco normal
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent

# Para propriedades simples, permite =>
csharp_style_expression_bodied_properties = true:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_accessors = true:silent

#### PREFERÊNCIAS DE NULL ####
# Prefere throw expressions: public string Name => _name ?? throw new Exception();
csharp_style_throw_expression = true:suggestion

# Prefere conditional delegate call: Action?.Invoke();
csharp_style_conditional_delegate_call = true:suggestion

#### INICIALIZADORES ####
# Prefere: var p = new Pessoa { Nome = "João" };
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion

# ═══════════════════════════════════════════════════════════════
# ARQUIVOS DESIGNER.CS - IGNORAR ANÁLISES
# ═══════════════════════════════════════════════════════════════

[*.Designer.cs]
# Código gerado automaticamente - não aplicar regras
generated_code = true

# Desabilitar warnings comuns em Designer.cs
dotnet_diagnostic.IDE0005.severity = none      # Usings desnecessários
dotnet_diagnostic.CS0649.severity = none       # Campo nunca atribuído
dotnet_diagnostic.IDE0044.severity = none      # Adicionar readonly
dotnet_diagnostic.CA1051.severity = none       # Campos de instância visíveis
dotnet_diagnostic.IDE0051.severity = none      # Membros privados não usados

# ═══════════════════════════════════════════════════════════════
# ARQUIVOS JSON
# ═══════════════════════════════════════════════════════════════

[*.json]
indent_size = 2

# ═══════════════════════════════════════════════════════════════
# ARQUIVOS XML (csproj, config, etc)
# ═══════════════════════════════════════════════════════════════

[*.{csproj,xml,config,props,targets,nuspec,resx}]
indent_size = 2

# ═══════════════════════════════════════════════════════════════
# SEVERITY LEVELS PERSONALIZADOS
# ═══════════════════════════════════════════════════════════════

# IDE0001: Simplificar nome
dotnet_diagnostic.IDE0001.severity = suggestion

# IDE0002: Simplificar acesso a membro
dotnet_diagnostic.IDE0002.severity = suggestion

# IDE0003: Remover 'this' ou 'Me'
dotnet_diagnostic.IDE0003.severity = suggestion

# IDE0004: Remover cast desnecessário
dotnet_diagnostic.IDE0004.severity = suggestion

# IDE0011: Adicionar chaves
dotnet_diagnostic.IDE0011.severity = warning

# IDE0040: Adicionar modificadores de acessibilidade
dotnet_diagnostic.IDE0040.severity = warning

# IDE0055: Corrigir formatação
dotnet_diagnostic.IDE0055.severity = suggestion

# CS8019: Using desnecessário
dotnet_diagnostic.CS8019.severity = warning